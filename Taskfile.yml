---
# yamllint disable rule:line-length
version: '2'

vars:
  run_docker: docker-compose run test_py
  docker_image_latest: "registry.gitlab.com/django_apps/django_apps"
  docker_image_test_js: "registry.gitlab.com/django_apps/django_apps:test_js"


tasks:
  pull-images:
    desc: Pull latest docker images
    cmds:
      - (set +o pipefail && docker pull "{{ .docker_image_latest }}" || true)
      - (set +o pipefail && docker pull "{{ .docker_image_test_js }}" || true)

  lint-py:
    desc: Run the python linters and formatters
    cmds:
      - "{{ .run_docker }} pylint {{ cookiecutter.project_slug }}"
      - "{{ .run_docker }} mypy ."
      - "{{ .run_docker }} isort --check-only"
      - "{{ .run_docker }} black --check --exclude venv --exclude '.*(venv|migrations)' ."

  lint-js:
    desc: Run the javascript linters and formatters
    cmds:
      - "{{ .run_docker }} npx eslint '**/**.js' --ignore-path .gitignore"
      - "{{ .run_docker }} npx stylelint '**/**.css' --ignore-path .gitignore"
- "{{ .run_docker }} npx js-beautify 'django_apps/**/**.html' --type html -r | grep -v unchanged && exit 1 || echo js-beautify passed"

    vars:
      run_docker: "docker-compose run test_js"

  test:
    desc: Run tests
    cmds:
      - docker-compose up -d
      - until docker-compose exec -T postgres "pg_isready"; do echo Waiting for Postgres setup... && sleep 1; done
      - "{{ .run_docker }} sh -c './manage.py makemigrations && ./manage.py migrate'"
      - "{{ .run_docker }} pytest --cov"

  build-images:
    desc: Build docker images
    deps: [build-py-image, build-js-image]

  build-py-image:
    description: Build py docker image
    cmds:
      - (set +o pipefail && docker pull "{{ .docker_image_latest }}" || true)
      - docker build -f Dockerfile          -t "{{ .docker_image_latest }}"   --cache-from "{{ .docker_image_latest }}" .

  build-js-image:
    desc: Build JS docker image
    cmds:
      - (set +o pipefail && docker pull "{{ .docker_image_test_js }}" || true)
      - docker build -f Dockerfile.test_js  -t "{{ .docker_image_test_js }}"  --cache-from "{{ .docker_image_test_js }}" .

  push-images:
    desc: Push docker images
    deps:
      - build-images
    cmds:
      - docker tag "{{ .docker_image_latest }}" "{{ .docker_image_commit }}"
      - docker push "{{ .docker_image_latest }}"
      - docker push "{{ .docker_image_commit }}"
      - docker push "{{ .docker_image_test_js }}"
    vars:
      commit:
        sh: git rev-parse --short HEAD
      docker_image_commit: "{{ .docker_image_latest }}:{{ .commit }}"

  default:
    deps:
      - lint-py
      - lint-js
      - test


